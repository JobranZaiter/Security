using Newtonsoft.Json;
using System.Net.Http;
using System.Threading.Tasks;

public class MalwareDetector
{
    private readonly string _apiKey = "0371a0789ca4fdc04b4e2c13b72328515c16d82fe18d88e486cae3e5d49680c7";
    private readonly HttpClient _httpClient;
    private readonly ILogger<MalwareDetector> _logger;

    public MalwareDetector(HttpClient httpClient,ILogger<MalwareDetector> logger)
    {
        _httpClient = httpClient;
        _logger = logger;
    }

    public async Task<bool> ScanFileForMalware(byte[] fileContent)
    {
        const string url = "https://www.virustotal.com/api/v3/files";

        _logger.LogInformation("Starting malware scan...");

        using (var content = new MultipartFormDataContent())
        {
            var byteArrayContent = new ByteArrayContent(fileContent);
            byteArrayContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");
            content.Add(byteArrayContent, "file", "uploadedfile");

            _httpClient.DefaultRequestHeaders.Add("x-apikey", _apiKey);
            _logger.LogInformation("Sending file to VirusTotal API...");

            var response = await _httpClient.PostAsync(url, content);

            if (!response.IsSuccessStatusCode)
            {
                _logger.LogError($"Failed to upload file. Status code: {response.StatusCode}");
                return false;
            }

            var responseBody = await response.Content.ReadAsStringAsync();
            _logger.LogInformation("Received response from VirusTotal API.");

            dynamic jsonResponse = JsonConvert.DeserializeObject(responseBody);

            if (jsonResponse?.data?.id == null)
            {
                _logger.LogWarning("Missing analysis ID in response from VirusTotal.");
                return false;
            }

            string analysisId = jsonResponse.data.id;
            _logger.LogInformation($"Received analysis ID: {analysisId}");
            _logger.LogInformation("Fetching analysis result from VirusTotal...");

            var analysisResponse = await _httpClient.GetAsync($"https://www.virustotal.com/api/v3/analyses/{analysisId}");

            if (!analysisResponse.IsSuccessStatusCode)
            {
                _logger.LogError($"Failed to retrieve analysis results. Status code: {analysisResponse.StatusCode}");
                return false;
            }

            var analysisResponseBody = await analysisResponse.Content.ReadAsStringAsync();
            _logger.LogInformation("Received analysis result from VirusTotal.");

            dynamic analysisJsonResponse = JsonConvert.DeserializeObject(analysisResponseBody);

            int maliciousCount = analysisJsonResponse?.data?.attributes?.last_analysis_stats?.malicious ?? 0;

            if (maliciousCount > 0)
            {
                _logger.LogInformation($"The file is malicious! {maliciousCount} engines flagged it as malicious.");
                return true;
            }
            else
            {
                _logger.LogInformation("The file is clean. No malicious detections.");
                return false;
            }
        }
    }
}
